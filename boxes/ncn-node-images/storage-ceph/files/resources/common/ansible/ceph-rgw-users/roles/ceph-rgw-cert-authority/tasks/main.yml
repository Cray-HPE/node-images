#
# MIT License
#
# (C) Copyright 2022 Hewlett Packard Enterprise Development LP
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#
---
- name: Ensure openssl and required utilities are installed
  zypper:
    name:
      - openssl
      - util-linux
    state: present
  delegate_to: "{{ groups['mons'][0] }}"
  run_once: True

- name: Create directory for Certificate Authority
  file:
    path: "{{item}}"
    state: directory
    mode: 0700
  with_items:
    - "{{cray_ca_root_dir}}"
    - "{{cray_ca_db_certs_dir}}"
  delegate_to: "{{ groups['mons'][0] }}"
  run_once: True

- name: Create directory for host and client certificates
  file:
    path: "{{ item }}"
    state: directory
  with_items:
    - "{{cray_ca_hosts_dir}}"
    - "{{cray_ca_clients_dir}}"
  delegate_to: "{{ groups['mons'][0] }}"
  run_once: True

- name: Seed ca.db.serial data file
  copy:
    content: "01"
    dest: "{{cray_ca_db_serial}}"
    force: no
    mode: 0644
  delegate_to: "{{ groups['mons'][0] }}"
  run_once: True

- name: Make sure ca.db.index exists
  copy:
    content: ""
    dest: "{{cray_ca_db_index}}"
    force: no
    mode: 0644
  delegate_to: "{{ groups['mons'][0] }}"
  run_once: True

- name: Seed ca.db.rand
  copy:
    content: "{{ 100 | random }}"
    dest: "{{cray_ca_db_rand}}"
    force: no
    mode: 0644
  delegate_to: "{{ groups['mons'][0] }}"
  run_once: True

- name: Write out openssl.cnf
  template:
    src: openssl.cnf.j2
    dest: "{{cray_ca_openssl_cnf}}"
    force: no
    mode: 0644
  delegate_to: "{{ groups['mons'][0] }}"
  run_once: True

- name: Generate certificate_authority.key
  command: openssl genrsa -out certificate_authority.key
  args:
    chdir: "{{cray_ca_root_dir}}"
    creates: "{{cray_ca_root_key}}"
  delegate_to: "{{ groups['mons'][0] }}"
  run_once: True

- name: Set file permissions on certificate_authority.key
  file:
    path: "{{cray_ca_root_key}}"
    mode: 0600
  delegate_to: "{{ groups['mons'][0] }}"
  run_once: True

- name: Generate random CN
  shell: uuidgen
  args:
    creates: "{{cray_ca_root_crt}}"
  register: cn_value
  delegate_to: "{{ groups['mons'][0] }}"
  run_once: True

- name: Generate certificate_authority.crt
  command: openssl req -new -x509 -days 3650 -key "{{cray_ca_root_key}}" -out "{{cray_ca_root_crt}}" -subj /C=XX/ST=XX/L=XX/O=XX/OU=XX/CN={{ cn_value.stdout }}/
  args:
    chdir: "{{cray_ca_root_dir}}"
    creates: "{{cray_ca_root_crt}}"
  delegate_to: "{{ groups['mons'][0] }}"
  run_once: True

- name: Set file permissions on certificate_authority.crt
  file:
    path: "{{cray_ca_root_crt}}"
    mode: 0600
  delegate_to: "{{ groups['mons'][0] }}"
  run_once: True

- name: Fetch CA Public Key
  fetch:
    src: "{{cray_ca_root_crt}}"
    dest: /tmp
  delegate_to: "{{ groups['mons'][0] }}"

- name: Copy CA Public Key to the system wide SSL Certificate cache
  copy:
    src: "/tmp/{{ groups['mons'][0] }}/{{cray_ca_root_crt}}"
    dest: /usr/share/pki/trust/anchors
    mode: 0644
  when: inventory_hostname in groups['managers'] or (groups['mons'] is defined and inventory_hostname in groups['mons'])

- name: Update SSL Certificate Cache
  command: update-ca-certificates
  when: inventory_hostname in groups['managers'] or (groups['mons'] is defined and inventory_hostname in groups['mons'])

- name: Record that certificate_authority ran  # Workaround https://github.com/ansible/ansible/issues/31751
  set_fact:
    certificate_authority_ran: True

